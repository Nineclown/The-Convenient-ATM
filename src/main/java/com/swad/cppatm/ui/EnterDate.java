package com.swad.cppatm.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.swad.cppatm.application.ATMSystem;
import com.swad.cppatm.enums.Locale;
import com.swad.cppatm.exceptions.AccountDoesNotExist;
import com.swad.cppatm.ui.components.JNumberTextField;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Date;

public class EnterDate {
    private JPanel enterDatePanel;
    private JTextField startDateField;
    private JTextField endDateField;
    private JButton cancelButton;
    private JButton confirmButton;
    private JLabel startLabel;
    private JLabel endLabel;

    private String setLocalizedString(ATMSystem system, String ko, String en) {
        return system.getState().getLocale() == Locale.en_US ? en : ko;
    }

    EnterDate(final JFrame parentFrame, final ATMSystem system) {
        startLabel.setText(setLocalizedString(system, "시작", "Start"));
        endLabel.setText(setLocalizedString(system, "끝", "End"));

        cancelButton.setText(setLocalizedString(system, "취소", "Cancel"));
        cancelButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                parentFrame.setContentPane(new SelectFunction(parentFrame, system).getPanel());
                parentFrame.pack();
                parentFrame.invalidate();
                parentFrame.validate();
            }
        });

        confirmButton.setText(setLocalizedString(system, "확인", "Confirm"));
        confirmButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                Date start, end;

                if (!startDateField.getText().matches("^\\d{8}$") && !endDateField.getText().matches("^\\d{8}$")) {
                    JOptionPane.showMessageDialog(parentFrame,
                        setLocalizedString(system, "잘못된 날짜 형식입니다.", "Invalid date format"),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }

                int startYear, startMonth, startDate;
                int endYear, endMonth, endDate;

                startYear = Integer.parseInt(startDateField.getText().substring(0, 4));
                startMonth = Integer.parseInt(startDateField.getText().substring(4, 6));
                startDate = Integer.parseInt(startDateField.getText().substring(6, 8));
                endYear = Integer.parseInt(endDateField.getText().substring(0, 4));
                endMonth = Integer.parseInt(endDateField.getText().substring(4, 6));
                endDate = Integer.parseInt(endDateField.getText().substring(6, 8));

                if (startMonth > 12 || endMonth > 12 || startDate > 31 || endDate > 31 || startYear < 1900 || endYear < 1900) {
                    JOptionPane.showMessageDialog(parentFrame,
                        setLocalizedString(system, "잘못된 날짜 형식입니다.", "Invalid date format"),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }

                start = new Date(startYear - 1900, startMonth - 1, startDate);
                end = new Date(endYear - 1900, endMonth - 1, endDate + 1);

                if (start.compareTo(end) >= 0) {
                    JOptionPane.showMessageDialog(parentFrame,
                        setLocalizedString(system, "시작일이 끝나는 날보다 큽니다.", "start date is after than end date."),
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try {
                    system.enterPeriodToQuery(start, end);
                } catch (AccountDoesNotExist ex) {
                    parentFrame.setContentPane(new SelectFunction(parentFrame, system).getPanel());
                    parentFrame.pack();
                    parentFrame.invalidate();
                    parentFrame.validate();
                    return;
                }

                parentFrame.setContentPane(new QueryList(parentFrame, system).getPanel());
                parentFrame.pack();
                parentFrame.invalidate();
                parentFrame.validate();
            }
        });
    }

    public JPanel getPanel() {
        return this.enterDatePanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        enterDatePanel = new JPanel();
        enterDatePanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        enterDatePanel.setBackground(new Color(-1));
        Font enterDatePanelFont = this.$$$getFont$$$(null, -1, 20, enterDatePanel.getFont());
        if (enterDatePanelFont != null) enterDatePanel.setFont(enterDatePanelFont);
        startLabel = new JLabel();
        Font startLabelFont = this.$$$getFont$$$(null, -1, 20, startLabel.getFont());
        if (startLabelFont != null) startLabel.setFont(startLabelFont);
        startLabel.setForeground(new Color(-16777216));
        startLabel.setText("시작");
        enterDatePanel.add(startLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        endLabel = new JLabel();
        Font endLabelFont = this.$$$getFont$$$(null, -1, 20, endLabel.getFont());
        if (endLabelFont != null) endLabel.setFont(endLabelFont);
        endLabel.setForeground(new Color(-16777216));
        endLabel.setText("끝");
        enterDatePanel.add(endLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-1));
        enterDatePanel.add(panel1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setBackground(new Color(-10592674));
        Font cancelButtonFont = this.$$$getFont$$$(null, -1, 20, cancelButton.getFont());
        if (cancelButtonFont != null) cancelButton.setFont(cancelButtonFont);
        cancelButton.setForeground(new Color(-1));
        cancelButton.setText("취소");
        panel1.add(cancelButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 60), null, 0, false));
        confirmButton = new JButton();
        confirmButton.setBackground(new Color(-10592674));
        Font confirmButtonFont = this.$$$getFont$$$(null, -1, 20, confirmButton.getFont());
        if (confirmButtonFont != null) confirmButton.setFont(confirmButtonFont);
        confirmButton.setForeground(new Color(-1));
        confirmButton.setText("확인");
        panel1.add(confirmButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(-1, 60), null, 0, false));
        endDateField = new JNumberTextField();
        Font endDateFieldFont = this.$$$getFont$$$(null, -1, 20, endDateField.getFont());
        if (endDateFieldFont != null) endDateField.setFont(endDateFieldFont);
        endDateField.setText("");
        enterDatePanel.add(endDateField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        startDateField = new JNumberTextField();
        Font startDateFieldFont = this.$$$getFont$$$(null, -1, 20, startDateField.getFont());
        if (startDateFieldFont != null) startDateField.setFont(startDateFieldFont);
        enterDatePanel.add(startDateField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return enterDatePanel;
    }
}
